package Vista;

import Datos.Contribuyente;
import Datos.Modelo_Tabla_Contribuyente;
import Datos.TipDoc;
import Negocio.TipDocBo;
import Negocio.ContribuyenteBo;
import java.awt.Font;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumnModel;

public class frmContribuyente extends javax.swing.JInternalFrame {

    private Modelo_Tabla_Contribuyente MTC = new Modelo_Tabla_Contribuyente();
    private Contribuyente objC = null;
    private TipDoc objTD = null;
    private String estado = "Si";
    private String nombre = "";
    private String apellido = "";
    private String razonSocial = "";

    /**
     * Creates new form Comerciales
     */
    public frmContribuyente() {
        initComponents();
        this.botonos();
        this.cargarCombox();
        this.cargarTabla();
        this.definir_tama√±o_columna();
        this.activarControles(false);

        this.labelRazonSocial.setEnabled(false);
        this.txtRazonSocial.setEnabled(false);
        this.labelRazonSocial.setVisible(false);
        this.txtRazonSocial.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        btnEstado = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        comboTipCont = new javax.swing.JComboBox<>();
        labelNombre = new javax.swing.JLabel();
        labelApellido = new javax.swing.JLabel();
        labelRazonSocial = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtApellido = new javax.swing.JTextField();
        txtRazonSocial = new javax.swing.JTextField();
        comboTipDoc = new javax.swing.JComboBox<>();
        txtNroDoc = new javax.swing.JTextField();
        txtDomicilio = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        btnEliminar = new javax.swing.JButton();
        txtBuscar = new javax.swing.JTextField();
        btnEditar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaContribuyente = new javax.swing.JTable();
        btnPerNatu = new javax.swing.JRadioButton();
        btnRazSocial = new javax.swing.JRadioButton();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("CONTRIBUYENTE");

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/documento.png"))); // NOI18N
        btnNuevo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/disco-flexible.png"))); // NOI18N
        btnGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/codigo-limpio.png"))); // NOI18N
        btnLimpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/cancelar.png"))); // NOI18N
        btnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/salida.png"))); // NOI18N
        btnSalir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnNuevo)
                .addGap(18, 18, 18)
                .addComponent(btnGuardar)
                .addGap(18, 18, 18)
                .addComponent(btnLimpiar)
                .addGap(18, 18, 18)
                .addComponent(btnCancelar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSalir)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSalir)
                    .addComponent(btnLimpiar)
                    .addComponent(btnNuevo)
                    .addComponent(btnGuardar)
                    .addComponent(btnCancelar))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(0, 102, 102));

        jPanel4.setBackground(new java.awt.Color(0, 153, 153));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "DATOS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        btnEstado.setBackground(new java.awt.Color(0, 153, 153));
        btnEstado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnEstado.setForeground(new java.awt.Color(255, 255, 255));
        btnEstado.setSelected(true);
        btnEstado.setText("ACTIVO");
        btnEstado.setToolTipText("");
        btnEstado.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEstado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/seleccion.png"))); // NOI18N
        btnEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEstadoActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("TIPO DE CONTRIBUYENTE:");

        comboTipCont.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboTipCont.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PERSONA NATURAL", "RAZON SOCIAL" }));
        comboTipCont.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        comboTipCont.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboTipContItemStateChanged(evt);
            }
        });

        labelNombre.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelNombre.setForeground(new java.awt.Color(255, 255, 255));
        labelNombre.setText("NOMBRE:");

        labelApellido.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelApellido.setForeground(new java.awt.Color(255, 255, 255));
        labelApellido.setText("APELLIDO:");

        labelRazonSocial.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelRazonSocial.setForeground(new java.awt.Color(255, 255, 255));
        labelRazonSocial.setText("RAZON SOCIAL:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("TIP. DOCUMENTO:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("NRO. DOCUMENTO:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("DOMICILIO:");

        txtNombre.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNombreKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });

        txtApellido.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtApellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtApellidoKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApellidoKeyTyped(evt);
            }
        });

        txtRazonSocial.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtRazonSocial.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtRazonSocialKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRazonSocialKeyTyped(evt);
            }
        });

        comboTipDoc.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboTipDoc.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        comboTipDoc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboTipDocKeyPressed(evt);
            }
        });

        txtNroDoc.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtNroDoc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNroDocKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNroDocKeyTyped(evt);
            }
        });

        txtDomicilio.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtDomicilio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDomicilioKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDomicilioKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelNombre)
                            .addComponent(jLabel1)
                            .addComponent(labelApellido)
                            .addComponent(labelRazonSocial)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtRazonSocial)
                            .addComponent(txtNombre)
                            .addComponent(txtApellido)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDomicilio, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboTipDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNroDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboTipCont, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 45, Short.MAX_VALUE))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(btnEstado)))
                .addGap(23, 23, 23))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboTipCont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNombre)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelApellido)
                    .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelRazonSocial)
                    .addComponent(txtRazonSocial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(comboTipDoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtNroDoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(txtDomicilio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnEstado)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(0, 153, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CONTRIBUYENTES REGISTRADOS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/eliminar.png"))); // NOI18N
        btnEliminar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        txtBuscar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBuscarKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscarKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuscarKeyTyped(evt);
            }
        });

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/curriculum.png"))); // NOI18N
        btnEditar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        tablaContribuyente.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tablaContribuyente.setModel(this.MTC);
        tablaContribuyente.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tablaContribuyente.getTableHeader().setResizingAllowed(false);
        tablaContribuyente.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablaContribuyente);

        btnPerNatu.setBackground(new java.awt.Color(0, 153, 153));
        buttonGroup1.add(btnPerNatu);
        btnPerNatu.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnPerNatu.setForeground(new java.awt.Color(255, 255, 255));
        btnPerNatu.setSelected(true);
        btnPerNatu.setText("PERSONA NATURAL");
        btnPerNatu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPerNatu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPerNatuActionPerformed(evt);
            }
        });

        btnRazSocial.setBackground(new java.awt.Color(0, 153, 153));
        buttonGroup1.add(btnRazSocial);
        btnRazSocial.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnRazSocial.setForeground(new java.awt.Color(255, 255, 255));
        btnRazSocial.setText("RAZON SOCIAL");
        btnRazSocial.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRazSocial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRazSocialActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnPerNatu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRazSocial, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(btnEditar)
                .addGap(41, 41, 41)
                .addComponent(btnEliminar)
                .addGap(156, 156, 156))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnEditar)
                            .addComponent(btnEliminar)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(btnPerNatu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRazSocial)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEstadoActionPerformed
        this.clicButtonEstado();
    }//GEN-LAST:event_btnEstadoActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        this.limpiar();
        this.cargarTabla();
        this.txtBuscar.setText("");
        this.activarControles(true);
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.limpiar();
        this.activarControles(false);
        this.cargarTabla();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        this.limpiar();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void comboTipContItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboTipContItemStateChanged
        this.validarTipoContr();
    }//GEN-LAST:event_comboTipContItemStateChanged

    private void txtNombreKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.txtApellido.requestFocus();
        }
        this.txtNombre.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                char c = evt.getKeyChar();
                if (Character.isLowerCase(c)) {
                    evt.setKeyChar(Character.toUpperCase(c));
                }
            }
        });
    }//GEN-LAST:event_txtNombreKeyPressed

    private void txtApellidoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApellidoKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.comboTipDoc.requestFocus();
        }
        this.txtApellido.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                char c = evt.getKeyChar();
                if (Character.isLowerCase(c)) {
                    evt.setKeyChar(Character.toUpperCase(c));
                }
            }
        });
    }//GEN-LAST:event_txtApellidoKeyPressed

    private void txtRazonSocialKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRazonSocialKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.comboTipDoc.requestFocus();
        }
        this.txtRazonSocial.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                char c = evt.getKeyChar();
                if (Character.isLowerCase(c)) {
                    evt.setKeyChar(Character.toUpperCase(c));
                }
            }
        });
    }//GEN-LAST:event_txtRazonSocialKeyPressed

    private void comboTipDocKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboTipDocKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.txtNroDoc.requestFocus();
        }
    }//GEN-LAST:event_comboTipDocKeyPressed

    private void txtNroDocKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNroDocKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.txtDomicilio.requestFocus();
        }
    }//GEN-LAST:event_txtNroDocKeyPressed

    private void txtDomicilioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDomicilioKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.btnGuardar.doClick();
        }
        this.txtDomicilio.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                char c = evt.getKeyChar();
                if (Character.isLowerCase(c)) {
                    evt.setKeyChar(Character.toUpperCase(c));
                }
            }
        });
    }//GEN-LAST:event_txtDomicilioKeyPressed

    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
        this.validar_llenado(evt, 2);
        if (this.txtNombre.getText().trim().length() >= 50) {
            getToolkit().beep(); //sonido de alerta
            evt.consume();
        }
        txtNombre.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                String texto = txtNombre.getText() + e.getKeyChar();
                if (texto.matches(".*(.)\\1{2,}.*")) {
                    e.consume(); // Ignora la tecla si tiene m√°s de 2 caracteres iguales seguidos
                }
            }
        });
        char c = evt.getKeyChar();
        if (c == ',' || c == '.' || c == '-') {
            evt.consume();
        }
    }//GEN-LAST:event_txtNombreKeyTyped

    private void txtApellidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApellidoKeyTyped
        this.validar_llenado(evt, 2);
        if (this.txtApellido.getText().trim().length() >= 50) {
            getToolkit().beep(); //sonido de alerta
            evt.consume();
        }
        txtApellido.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                String texto = txtApellido.getText() + e.getKeyChar();
                if (texto.matches(".*(.)\\1{2,}.*")) {
                    e.consume(); // Ignora la tecla si tiene m√°s de 2 caracteres iguales seguidos
                }
            }
        });
        char c = evt.getKeyChar();
        if (c == ',' || c == '.' || c == '-') {
            evt.consume();
        }
    }//GEN-LAST:event_txtApellidoKeyTyped

    private void txtRazonSocialKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRazonSocialKeyTyped
        if (this.txtRazonSocial.getText().trim().length() >= 80) {
            getToolkit().beep(); //sonido de alerta
            evt.consume();
        }
        txtRazonSocial.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                String texto = txtRazonSocial.getText() + e.getKeyChar();
                if (texto.matches(".*(.)\\1{2,}.*")) {
                    e.consume(); // Ignora la tecla si tiene m√°s de 2 caracteres iguales seguidos
                }
            }
        });
        char c = evt.getKeyChar();
        if (c == ',' ||c == '-') {
            evt.consume();
        }
    }//GEN-LAST:event_txtRazonSocialKeyTyped

    private void txtNroDocKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNroDocKeyTyped
        this.validar_llenado(evt, 1);
        if (this.comboTipDoc.getSelectedIndex() == 1) {
            if (this.txtNroDoc.getText().trim().length() >= 8) {
                getToolkit().beep(); //sonido de alerta
                evt.consume();
            }
        } else {
            if (this.txtNroDoc.getText().trim().length() >= 11) {
                getToolkit().beep(); //sonido de alerta
                evt.consume();
            }
        }
        char c = evt.getKeyChar();
        if (c == ',' || c == '.' || c == '-') {
            evt.consume();
        }
        if (Character.isWhitespace(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNroDocKeyTyped

    private void txtDomicilioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDomicilioKeyTyped
        if (this.txtDomicilio.getText().trim().length() >= 50) {
            getToolkit().beep(); //sonido de alerta
            evt.consume();
        }
        txtDomicilio.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                String texto = txtDomicilio.getText() + e.getKeyChar();
                if (texto.matches(".*(.)\\1{2,}.*")) {
                    e.consume(); // Ignora la tecla si tiene m√°s de 2 caracteres iguales seguidos
                }
            }
        });
        char c = evt.getKeyChar();
        if (c == ',' || c == '-') {
            evt.consume();
        }
    }//GEN-LAST:event_txtDomicilioKeyTyped

    private void txtBuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyTyped
        if (this.txtBuscar.getText().trim().length() >= 50) {
            getToolkit().beep(); //sonido de alerta
            evt.consume();
        }
        txtBuscar.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                String texto = txtBuscar.getText() + e.getKeyChar();
                if (texto.matches(".*(.)\\1{2,}.*")) {
                    e.consume(); // Ignora la tecla si tiene m√°s de 2 caracteres iguales seguidos
                }
            }
        });
        char c = evt.getKeyChar();
        if (c == ',' || c == '.' || c == '-') {
            evt.consume();
        }
    }//GEN-LAST:event_txtBuscarKeyTyped

    private void txtBuscarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyPressed
        this.txtBuscar.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                char c = evt.getKeyChar();
                if (Character.isLowerCase(c)) {
                    evt.setKeyChar(Character.toUpperCase(c));
                }
            }
        });
    }//GEN-LAST:event_txtBuscarKeyPressed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        this.guardar();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void txtBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyReleased
        this.buscar();
    }//GEN-LAST:event_txtBuscarKeyReleased

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        this.buttonEditar();
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        this.eliminar();
        this.cargarTabla();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnPerNatuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPerNatuActionPerformed
        this.cargarTabla();
        this.txtBuscar.setText("");
    }//GEN-LAST:event_btnPerNatuActionPerformed

    private void btnRazSocialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRazSocialActionPerformed
        this.cargarTabla();
        this.txtBuscar.setText("");
    }//GEN-LAST:event_btnRazSocialActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JCheckBox btnEstado;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JRadioButton btnPerNatu;
    private javax.swing.JRadioButton btnRazSocial;
    private javax.swing.JButton btnSalir;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> comboTipCont;
    private javax.swing.JComboBox<TipDoc> comboTipDoc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelApellido;
    private javax.swing.JLabel labelNombre;
    private javax.swing.JLabel labelRazonSocial;
    private javax.swing.JTable tablaContribuyente;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtDomicilio;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNroDoc;
    private javax.swing.JTextField txtRazonSocial;
    // End of variables declaration//GEN-END:variables

    private void validar_llenado(java.awt.event.KeyEvent evt, int opc) {
        //opc: 1 es para ingresar solo n√∫meros
        //opc: 2 es para ingresar solo letras
        char validar = evt.getKeyChar();
        if (opc == 1) {
            if (Character.isLetter(validar) && validar != KeyEvent.VK_SPACE
                    && validar != KeyEvent.VK_ENTER) {
                getToolkit().beep(); //sonido de alerta
                evt.consume();
            }
        }
        if (opc == 2) {
            if (Character.isDigit(validar) && validar != KeyEvent.VK_SPACE
                    && validar != KeyEvent.VK_ENTER) {
                getToolkit().beep(); //sonido de alerta
                evt.consume();
            }
        }
    }

    private void clicButtonEstado() {
        if (this.btnEstado.isSelected()) {
            ImageIcon icono = new ImageIcon("src/Imagenes/seleccion.png");
            this.btnEstado.setIcon(icono);
            this.btnEstado.setText("ACTIVO");
            estado = "Si";
        } else {
            ImageIcon icono = new ImageIcon("src/Imagenes/no-seleccion.png");
            this.btnEstado.setIcon(icono);
            this.btnEstado.setText("INACTIVO");
            estado = "No";
        }
    }

    private void botonos() {
        this.btnCancelar.setOpaque(false);
        this.btnCancelar.setContentAreaFilled(false);
        this.btnCancelar.setBorderPainted(false);
        this.btnCancelar.setToolTipText("Cancelar");

        this.btnNuevo.setOpaque(false);
        this.btnNuevo.setContentAreaFilled(false);
        this.btnNuevo.setBorderPainted(false);
        this.btnNuevo.setToolTipText("Nuevo");

        this.btnGuardar.setOpaque(false);
        this.btnGuardar.setContentAreaFilled(false);
        this.btnGuardar.setBorderPainted(false);
        this.btnGuardar.setToolTipText("Guardar");

        this.btnLimpiar.setOpaque(false);
        this.btnLimpiar.setContentAreaFilled(false);
        this.btnLimpiar.setBorderPainted(false);
        this.btnLimpiar.setToolTipText("Limpiar");

        this.btnEliminar.setOpaque(false);
        this.btnEliminar.setContentAreaFilled(false);
        this.btnEliminar.setBorderPainted(false);
        this.btnEliminar.setToolTipText("Eliminar");

        this.btnSalir.setOpaque(false);
        this.btnSalir.setContentAreaFilled(false);
        this.btnSalir.setBorderPainted(false);
        this.btnSalir.setToolTipText("Salir");

        this.btnEditar.setOpaque(false);
        this.btnEditar.setContentAreaFilled(false);
        this.btnEditar.setBorderPainted(false);
        this.btnEditar.setToolTipText("Editar");
    }

    private void activarControles(boolean estado) {
        this.txtApellido.setEnabled(estado);
        this.txtRazonSocial.setEnabled(estado);
        this.txtNombre.setEnabled(estado);
        this.comboTipCont.setEnabled(estado);
        this.comboTipDoc.setEnabled(estado);
        this.txtNroDoc.setEnabled(estado);
        this.txtDomicilio.setEnabled(estado);
        this.btnGuardar.setEnabled(estado);
        this.btnLimpiar.setEnabled(estado);
        this.btnCancelar.setEnabled(estado);
        this.btnEstado.setEnabled(estado);

        this.btnNuevo.setEnabled(!estado);
        this.btnEditar.setEnabled(!estado);
        this.txtBuscar.setEnabled(!estado);
        this.tablaContribuyente.setEnabled(!estado);
        this.btnEliminar.setEnabled(!estado);
        this.btnRazSocial.setEnabled(!estado);
        this.btnPerNatu.setEnabled(!estado);

        if (estado) {
            tablaContribuyente.setBackground(new java.awt.Color(255, 102, 102));
        } else {
            tablaContribuyente.setBackground(new java.awt.Color(255, 255, 255));
        }
    }

    private void limpiar() {
        this.txtNombre.setText("");
        this.txtApellido.setText("");
        this.txtRazonSocial.setText("");
        this.txtDomicilio.setText("");
        this.comboTipCont.setSelectedIndex(0);
        this.comboTipDoc.setSelectedIndex(0);
        this.txtNroDoc.setText("");

        this.btnEstado.setSelected(true);
        ImageIcon icono = new ImageIcon("src/Imagenes/seleccion.png");
        this.btnEstado.setIcon(icono);
        this.btnEstado.setText("ACTIVO");

        objTD = null;
        objC = null;
        estado = "Si";
        apellido = "";
        nombre = "";
        razonSocial = "";
    }

    private void cargarCombox() {
        this.comboTipDoc.removeAllItems();
        TipDoc objTipDoc = new TipDoc();
        objTipDoc.setNombre("--SELECCIONE--");
        this.comboTipDoc.addItem(objTipDoc);

        try {
            TipDocBo.obtenerListaComboTipDoc(this.comboTipDoc);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private void cargarTabla() {
        ArrayList<Contribuyente> ltsContribuyente = new ArrayList();
        try {
            if (this.btnPerNatu.isSelected()) {
                ltsContribuyente = ContribuyenteBo.obtenerListaContribuyente();
            } else {
                ltsContribuyente = ContribuyenteBo.obtenerListaContribuyenteRazonSocial();
            }
            MTC.setListado_Contribuyente(ltsContribuyente);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private void definir_tama√±o_columna() {
        TableColumnModel columnModel = this.tablaContribuyente.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(300);
        columnModel.getColumn(1).setPreferredWidth(120);
        columnModel.getColumn(2).setPreferredWidth(120);
        columnModel.getColumn(3).setPreferredWidth(300);
        columnModel.getColumn(4).setPreferredWidth(120);

        this.tablaContribuyente.getTableHeader().setFont(new Font("Tahoma", 1, 12));
        ((DefaultTableCellRenderer) this.tablaContribuyente.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
    }

    private void validarTipoContr() {
        if (this.comboTipCont.getSelectedIndex() == 0) {
            this.activarControles(true);
            this.txtNombre.setEnabled(true);
            this.txtNombre.setVisible(true);
            this.txtApellido.setEnabled(true);
            this.txtApellido.setVisible(true);
            this.txtRazonSocial.setEnabled(false);
            this.txtRazonSocial.setVisible(false);
            this.labelNombre.setEnabled(true);
            this.labelNombre.setVisible(true);
            this.labelApellido.setEnabled(true);
            this.labelApellido.setVisible(true);
            this.labelRazonSocial.setEnabled(false);
            this.labelRazonSocial.setVisible(false);
            this.txtRazonSocial.setText("");
        }
        if (this.comboTipCont.getSelectedIndex() == 1) {
            this.activarControles(true);
            this.txtNombre.setEnabled(false);
            this.txtNombre.setVisible(false);
            this.txtApellido.setEnabled(false);
            this.txtApellido.setVisible(false);
            this.txtRazonSocial.setEnabled(true);
            this.txtRazonSocial.setVisible(true);
            this.labelNombre.setEnabled(false);
            this.labelNombre.setVisible(false);
            this.labelApellido.setEnabled(false);
            this.labelApellido.setVisible(false);
            this.labelRazonSocial.setEnabled(true);
            this.labelRazonSocial.setVisible(true);
            this.txtNombre.setText("");
            this.txtApellido.setText("");
        }
    }

    private boolean general() {
        if (this.comboTipDoc.getSelectedIndex() == 0 || this.txtNroDoc.getText().trim().equals("")
                || this.txtDomicilio.getText().trim().equals("")) {
            return false;
        } else {
            return true;
        }
    }

    private boolean validarNomb() {
        boolean fsa = true;
        if (this.comboTipCont.getSelectedIndex() == 0) {
            if (this.txtNombre.getText().trim().equals("") || this.txtApellido.getText().trim().equals("")) {
                fsa = false;
            } else {
                this.nombre = this.txtNombre.getText().trim();
                this.apellido = this.txtApellido.getText().trim();
            }
        } else {
            if (this.txtRazonSocial.getText().trim().equals("")) {
                fsa = false;
            } else {
                this.razonSocial = this.txtRazonSocial.getText().trim();
            }
        }
        return fsa;
    }

    private boolean validarNroDocumento() {
        boolean est = true;
        if (this.comboTipDoc.getSelectedIndex() == 1) {
            if (this.txtNroDoc.getText().trim().length() < 8) {
                est = false;
            }
        }
        if (this.comboTipDoc.getSelectedIndex() == 2) {
            if (this.txtNroDoc.getText().trim().length() < 11) {
                est = false;
            }
        }
        return est;
    }

    private void obtenerDatosCombo() {
        if (this.comboTipDoc.getItemAt(this.comboTipDoc.getSelectedIndex()) != null) {
            this.objTD = this.comboTipDoc.getItemAt(this.comboTipDoc.getSelectedIndex());
        }
    }

    private void guardar() {
        if (this.general() && this.validarNomb()) {
            if (this.validarNroDocumento()) {
                this.obtenerDatosCombo();
                Contribuyente objContr = new Contribuyente(0, this.nombre, this.apellido, this.razonSocial, this.objTD,
                        this.txtNroDoc.getText(), this.txtDomicilio.getText(), this.estado);
                try {
                    if (this.objC == null) {
                        if (this.buscarExsteNomb(objContr.getNmombre(), objContr.getApellido(), objContr.getRazonSocial())) {
                            if (ContribuyenteBo.buscarDNI(objContr.getNroDoc())) {
                                if (objContr.getRazonSocial().length() > 0) {
                                    if (ContribuyenteBo.grabarContribuyenteRazonSocial(objContr)) {
                                        JOptionPane.showMessageDialog(this, "Se Registr√≥ Correctamente", "MENSAJE --> CONTRIBUYENTE", JOptionPane.INFORMATION_MESSAGE);
                                    } else {
                                        JOptionPane.showMessageDialog(this, "No se pudo Registrar", "MENSAJE --> CONTRIBUYENTE", JOptionPane.ERROR_MESSAGE);
                                    }
                                } else {
                                    if (ContribuyenteBo.grabarContribuyente(objContr)) {
                                        JOptionPane.showMessageDialog(this, "Se Registr√≥ Correctamente", "MENSAJE --> CONTRIBUYENTE", JOptionPane.INFORMATION_MESSAGE);
                                    } else {
                                        JOptionPane.showMessageDialog(this, "No se pudo Registrar", "MENSAJE --> CONTRIBUYENTE", JOptionPane.ERROR_MESSAGE);
                                    }
                                }
                                this.limpiar();
                                this.activarControles(false);
                                this.cargarTabla();
                            } else {
                                JOptionPane.showMessageDialog(this, "El DNI ingresado ya se encuentra registrado.", "MENSAJE --> CONTRIBUYENTE", JOptionPane.WARNING_MESSAGE);
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "El Nombre y/o el Apellido o la Razon Social ya se encuentra registrado.", "MENSAJE --> CONTRIBUYENTE", JOptionPane.WARNING_MESSAGE);
                        }
                    } else {
                        boolean existeDNI = true, nombApp = true;
                        objContr.setIdContribuyente(this.objC.getIdContribuyente());
                        if (!objContr.getNroDoc().equals(this.objC.getNroDoc())) {
                            existeDNI = ContribuyenteBo.buscarDNI(objContr.getNroDoc());
                        }
                        if (this.comboTipCont.getSelectedIndex() == 0) {
                            if (!objContr.getNmombre().equals(this.objC.getNmombre()) && !objContr.getApellido().equals(this.objC.getApellido())) {
                                nombApp = ContribuyenteBo.buscarNombreApellido(objContr.getNmombre(), objContr.getApellido());
                            }
                        } else {
                            if (!objContr.getRazonSocial().equals(this.objC.getRazonSocial())) {
                                nombApp = ContribuyenteBo.buscarRazonSocial(objContr.getRazonSocial());
                            }
                        }

                        if (existeDNI) {
                            if (nombApp) {
                                if (objContr.getRazonSocial().length() > 0) {
                                    if (ContribuyenteBo.modificarContribuyenteRazonsocial(objContr)) {
                                        JOptionPane.showMessageDialog(this, "Se Modific√≥ Correctamente", "MENSAJE --> CONTRIBUYENTE", JOptionPane.INFORMATION_MESSAGE);
                                    } else {
                                        JOptionPane.showMessageDialog(this, "No se pudo Modificar", "MENSAJE --> CONTRIBUYENTE", JOptionPane.ERROR_MESSAGE);
                                    }
                                } else {
                                    if (ContribuyenteBo.modificarContribuyente(objContr)) {
                                        JOptionPane.showMessageDialog(this, "Se Modific√≥ Correctamente", "MENSAJE --> CONTRIBUYENTE", JOptionPane.INFORMATION_MESSAGE);
                                    } else {
                                        JOptionPane.showMessageDialog(this, "No se pudo Modificar", "MENSAJE --> CONTRIBUYENTE", JOptionPane.ERROR_MESSAGE);
                                    }
                                }
                                this.limpiar();
                                this.activarControles(false);
                                this.cargarTabla();
                            } else {
                                JOptionPane.showMessageDialog(this, "El Nombre y/o el Apellido o la Razon Social ya se encuentra registrado.", "MENSAJE --> CONTRIBUYENTE", JOptionPane.WARNING_MESSAGE);
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "El DNI ingresado ya se encuentra registrado.", "MENSAJE --> CONTRIBUYENTE", JOptionPane.WARNING_MESSAGE);
                        }
                    }
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Verifique que el N√∫mero de Documento este llenado correctamente.", "MENSAJE --> CONTRIBUYENTE", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Verifique que todos los campos hallan sido llenados.", "MENSAJE --> CONTRIBUYENTE", JOptionPane.WARNING_MESSAGE);
        }
    }

    private boolean buscarExsteNomb(String nombre, String apellido, String razon) {
        boolean estg = true;
        try {
            if (this.comboTipCont.getSelectedIndex() == 0) {
                estg = ContribuyenteBo.buscarNombreApellido(nombre, apellido);
            } else {
                estg = ContribuyenteBo.buscarRazonSocial(razon);
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        return estg;
    }

    private void buscar() {
        String buscar = this.txtBuscar.getText().trim();
        ArrayList<Contribuyente> ltsContribuyente = new ArrayList();
        try {
            if (this.btnPerNatu.isSelected()) {
                ltsContribuyente = ContribuyenteBo.buscarDNIContribuyente(buscar);
                if (ltsContribuyente.isEmpty()) {
                    ltsContribuyente = ContribuyenteBo.buscarNombreContribuyente(buscar);
                }
                if (ltsContribuyente.isEmpty()) {
                    ltsContribuyente = ContribuyenteBo.buscarApellidoContribuyente(buscar);
                }
                if (ltsContribuyente.isEmpty()) {
                    ltsContribuyente = ContribuyenteBo.buscarPersonaContribuyenteDireccion(buscar);
                }
            } else {
                ltsContribuyente = ContribuyenteBo.buscarRazonSocialContribuyente(buscar);
                if (ltsContribuyente.isEmpty()) {
                    ltsContribuyente = ContribuyenteBo.buscarDNIContribuyenteRazonSocial(buscar);
                }
                if (ltsContribuyente.isEmpty()) {
                    ltsContribuyente = ContribuyenteBo.buscarRazonSocialContribuyenteDireccion(buscar);
                }
            }
            MTC.setListado_Contribuyente(ltsContribuyente);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private void buttonEditar() {
        this.txtBuscar.setText("");
        int fila = this.tablaContribuyente.getSelectedRow();
        if (fila != -1) {
            this.objC = MTC.getContribuyente(fila);
            this.activarControles(true);
            this.cargarDatos(objC);
            this.cargarTabla();
            this.btnLimpiar.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(this, "Usted no a seleccionado un campo en la tabla.", "MENSAJE --> CONTRIBUYENTE", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void cargarDatos(Contribuyente objC) {
        if (objC.getRazonSocial() != null) {
            this.comboTipCont.setSelectedIndex(1);
            this.txtRazonSocial.setText(objC.getRazonSocial());

            this.txtNombre.setEnabled(false);
            this.txtNombre.setVisible(false);
            this.txtApellido.setEnabled(false);
            this.txtApellido.setVisible(false);
            this.txtRazonSocial.setEnabled(true);
            this.txtRazonSocial.setVisible(true);
            this.labelNombre.setEnabled(false);
            this.labelNombre.setVisible(false);
            this.labelApellido.setEnabled(false);
            this.labelApellido.setVisible(false);
            this.labelRazonSocial.setEnabled(true);
            this.labelRazonSocial.setVisible(true);
            this.txtNombre.setText("");
            this.txtApellido.setText("");
        } else {
            this.comboTipCont.setSelectedIndex(0);
            this.txtNombre.setText(objC.getNmombre());
            this.txtApellido.setText(objC.getApellido());

            this.txtNombre.setEnabled(true);
            this.txtNombre.setVisible(true);
            this.txtApellido.setEnabled(true);
            this.txtApellido.setVisible(true);
            this.txtRazonSocial.setEnabled(false);
            this.txtRazonSocial.setVisible(false);
            this.labelNombre.setEnabled(true);
            this.labelNombre.setVisible(true);
            this.labelApellido.setEnabled(true);
            this.labelApellido.setVisible(true);
            this.labelRazonSocial.setEnabled(false);
            this.labelRazonSocial.setVisible(false);
            this.txtRazonSocial.setText("");
        }

        if (objC.getEstado().equals("Si")) {
            this.btnEstado.setSelected(true);
            ImageIcon icono = new ImageIcon("src/Imagenes/seleccion.png");
            this.btnEstado.setIcon(icono);
            this.btnEstado.setText("ACTIVO");
            this.estado = "Si";
        } else {
            this.btnEstado.setSelected(false);
            ImageIcon icono = new ImageIcon("src/Imagenes/no-seleccion.png");
            this.btnEstado.setIcon(icono);
            this.btnEstado.setText("INACTIVO");
            this.estado = "No";
        }

        this.comboTipDoc.getModel().setSelectedItem(objC.getObjTipDoc());
        this.txtNroDoc.setText(objC.getNroDoc());
        this.txtDomicilio.setText(objC.getDomicilio());

        this.objTD = objC.getObjTipDoc();
    }

    private void eliminar() {
        if (this.tablaContribuyente.getSelectedRow() != -1) {
            int fila = this.tablaContribuyente.getSelectedRow();
            Contribuyente objCon = MTC.getContribuyente(fila);
            if (objCon.getEstado().equals("Si")) {
                int confirm = JOptionPane.showConfirmDialog(this, "¬øEst√° seguro que desea eliminar al Contribuyente "
                        + objCon.toString() + " ?", "ELIMINAR CONTRIBUYENTE", JOptionPane.YES_NO_OPTION);
                if (confirm == 0) {
                    try {
                        if (ContribuyenteBo.eliminarContribuyente(objCon)) {
                            this.cargarTabla();
                            this.limpiar();
                            this.activarControles(false);
                        } else {
                            JOptionPane.showMessageDialog(this, "No se pudo Eliminar", "MENSAJE --> CONTRIBUYENTE", JOptionPane.ERROR_MESSAGE);
                        }
                    } catch (Exception e) {
                        System.out.println(e.getMessage());
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "El Contribuyente selecionado ya se encuentra Inactivo.", "MENSAJE --> CONTRIBUYENTE", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Usted no a seleccionado un campo en la tabla.", "MENSAJE --> CONTRIBUYENTE", JOptionPane.ERROR_MESSAGE);
        }
    }
}
